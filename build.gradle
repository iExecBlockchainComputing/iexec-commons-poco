plugins {
    id 'java-library'
    id 'io.freefair.lombok' version '8.10.2'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'maven-publish'
}

group = 'com.iexec.commons'

ext {
    testContainersVersion = '1.20.4'
}

if (!project.hasProperty('gitBranch')) {
    ext.gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

if (gitBranch != 'main' && gitBranch != 'master' && !(gitBranch ==~ '(release|hotfix|support)/.*')) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://docker-regis-adm.iex.ec/repository/maven-public/'
        credentials {
            username nexusUser
            password nexusPassword
        }
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.3.8')

    // web3j
    api 'org.web3j:core:4.9.7'

    // apache commons.lang3
    implementation 'org.apache.commons:commons-lang3'

    // multiaddresses (IPFS)
    implementation 'com.github.multiformats:java-multiaddr:v1.4.6'

    // jakarta xml binding (provide DataTypeConverter for BytesUtils)
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api'

    // failsafe
    implementation 'net.jodah:failsafe:2.4.4'

    // jakarta annotations like PostConstruct
    implementation 'jakarta.annotation:jakarta.annotation-api'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add('-parameters')
}

testing {
    suites {
        test {
            useJUnitJupiter()
            dependencies {
                implementation 'org.awaitility:awaitility'
                implementation 'org.assertj:assertj-core'
                implementation 'org.mockito:mockito-junit-jupiter'
                // spring-test for ReflectionTestUtils
                implementation 'org.springframework:spring-test'
                implementation "org.testcontainers:junit-jupiter:$testContainersVersion"
                // logback
                runtimeOnly 'ch.qos.logback:logback-classic'
            }
        }
    }
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
}

test {
    reports {
        junitXml.required = true
        html.required = true
    }
}

tasks.register('itest') {
    group 'Verification'
    description 'Runs the integration tests.'
}

// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.required = true
    }
}
tasks.sonarqube.dependsOn tasks.jacocoTestReport

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username nexusUser
                password nexusPassword
            }
            url = project.hasProperty('nexusUrl') ? nexusUrl : ''
        }
    }
}
